@using Newtonsoft.Json
@model CDNVN.ParallaxPage.Models.Presentation

@{
    ViewBag.Title = "Details";
    Layout = "../Shared/_LayoutPreview.cshtml";
    dynamic slides = JsonConvert.DeserializeObject(HttpUtility.UrlDecode(Model.JsonSlide));
    var animation = "var animation = [";
    var style = "";

}
<div class="size" style="position: fixed; top: 0; left: 0; z-index: 999; background: #c0c0c0; padding: 3px 10px">1349px</div>

@foreach (var slide in slides)
{
    <div class="slide" id="@slide["id"]">
        <div class="slide-container">
            @{
    var layers = slide["layers"];
    style += string.Format("#{0} {{ {1} }} ", slide["id"], slide["style"]);
    var slideAnimations = slide["animations"];
    foreach (var slideAnimation in slideAnimations)
    {
        animation += string.Format("{{ id:\"#{0}\", animation:parallax.{1}, duration:{2}, start:{3}, repeat:{4}, auto:{5}, delay:{6} }},", slide["id"], slideAnimation["value"], slideAnimation["duration"], slideAnimation["start"], slideAnimation["repeat"], slideAnimation["auto"].ToString().ToLower(), slideAnimation["delay"]);
    }
            }
            @foreach (var layer in layers)
            {
                style += string.Format("#{0} {{ {1} }} ", layer["id"], layer["style"]);
                var layerAnimations = layer["animations"];
                foreach (var layerAnimation in layerAnimations)
                {
                    //animation += "parallax.Animation('#" + layer["id"] + "', parallax." + layerAnimation["value"] + ", " + layerAnimation["duration"] + ", " + layerAnimation["start"] + ", " + layerAnimation["repeat"] + ", " + layerAnimation["auto"].ToString().ToLower() + "); ";
                    animation += string.Format("{{ id:\"#{0}\", animation:parallax.{1}, duration:{2}, start:{3}, repeat:{4}, auto:{5}, delay:{6} }},", layer["id"], layerAnimation["value"], layerAnimation["duration"], layerAnimation["start"], layerAnimation["repeat"], layerAnimation["auto"].ToString().ToLower(), layerAnimation["delay"]);
                }
                <div class="layer" id="@layer["id"]">
                    <div class="layer-container" style="width: 100%;height: 100%">
                        @Html.Raw(layer["content"])
                    </div>
                </div>
            }
        </div>
    </div>
}

@{
    animation = animation.Substring(0, animation.Length - 1) + "];";
}

@section styles
    {
    <style>
            .trigger {
                visibility: hidden;
                position: absolute;
                border-top: 1px green solid;
                border-bottom: 1px red solid;
                z-index: 1000;
            }

            .parallax-container {
                width: 100%;
                overflow: hidden;
            }
            @style
    </style>
}
@section scripts
    {
    <script src="@Url.Content("~/Scripts/StringPropetype.js")"></script>
    <script src="@Url.Content("~/Scripts/ParallaxAnimation.js")"></script>
    <script type="text/javascript">

            var parallax = new ParallaxAnimation();
            parallax.InitScroll();
            @Html.Raw(animation);
            $(function() {
                zoom();
                RunAnimation(parallax, animation);
            });

            function RunAnimation(parallax, a) {
                for (var i = 0; i < a.length; i++) {
                    parallax.Animation(a[i]["id"], a[i]["animation"], a[i]["duration"], a[i]["start"], a[i]["repeat"], a[i]["auto"], a[i]["delay"]);
                }
            }

            var _zoomStart = 1349;

            function zoom() {
                var percent = zoomPercent();
                $('.slide').each(function() {
                    var css = {
                        height: $(this).height() * zoomPercent()
                    };
                    $(this).css(css);
                });
                $('.layer').each(function () {
                    var z = $(this).width()*zoomPercent();
                    console.log($(this).attr("id") + ":" + $(this).width() + "x" + zoomPercent() + "=" + z);
                    var css = {
                        width: $(this).outerWidth() * zoomPercent(),
                        height: $(this).outerHeight() * zoomPercent(),
                        top: $(this).position().top * zoomPercent(),
                        left: $(this).position().left * zoomPercent(),
                    };
                    $(this).css(css);
                });
                $('.layer-container').css({ zoom: percent });
            }

            $(window).resize(function() {
                $('.size').html($(window).width() + "px | " + zoomPercent());

            });

            $(function() {
                $('.slide').on("click", function() {
                    if ($(this).is(":last-of-type")) {
                        $('body').animate({ scrollTop: 0 }, $('body').height() * 5, "linear");
                    } else {
                        $('body').animate({ scrollTop: $(this).next().offset().top + $(this).next().height() - $(window).height() }, $(this).next().height() * 5, "linear");
                    }
                });
            });
    </script>
}

